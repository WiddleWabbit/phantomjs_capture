<?php

// @todo: hook_help.

/**
 * Captures a screen shot using PhantomJS by calling the program.
 *
 * @param string $url
 *   The ULR/http(s) to render the screen shot from.
 * @param string $dest
 *   The destination for the rendered file (e.g. public://fecthed_images).
 * @param string $filename
 *   The filename to store the file as in the destination.
 * @param string $element
 *   The id of the DOM element to render in the document.
 *
 * @return bool
 *   Returns TRUE if the screen shot was taken else FALSE on error.
 *
 * @todo: provide this as a service
 */
function phantomjs_capture_screen($url, $dest, $filename, $element = NULL) {
  // Get PhantomJS binary.
  $binary = _phantomjs_capture_get_binray();
  if (!$binary) {
    drupal_set_message(t('PhantomJS binary was not found. Plase intall PhantomJS on the system.'));
    return FALSE;
  }

  // Check that destination is writable.
  if (!file_prepare_directory($dest, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('The PhantomJS destination path (@dest) was not writeable or could not be created.', array(
      '@dest' => $dest,
    )));
    return FALSE;
  }

  // Get absolute path to PhantomJS script and the destination file.
  $script = realpath(variable_get('phantomjs_capture_script', drupal_get_path('module', 'phantomjs_capture') . '/js/phantomjs_capture.js'));
  $dest = drupal_realpath($dest . '/' . $filename);

  // Run PhantomJS to create the screen shot.
  $output = array();
  if ($element) {
    exec($binary . ' ' . $script . ' ' . $url . ' ' . $dest . ' ' . escapeshellarg($element), $output);
  }
  else {
    exec($binary . ' ' . $script . ' ' . $url . ' ' . $dest, $output);
  }

  // Check that PhantomJS was able to load the page.
  if ($output[0] == '500') {
    return FALSE;
  }
  return TRUE;
}
