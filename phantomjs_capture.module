<?php

// @todo: hook_help.

/**
 * Ajax callback for the test PhantomJS form on the administration page.
 */
function phantomjs_capture_test_submit($form, $form_state) {
  // Build urls and destination.
  $url = $form_state['values']['phantomjs_capture_test']['url'];
  $file = 'test' . $form_state['values']['phantomjs_capture_test']['format'];
  $dest = file_default_scheme() . '://' . variable_get('phantomjs_capture_dest', 'phantomjs');

  // Get the screen shot and create success/error message.
  $output = '<div class="messages status"><ul><li>' . t('File have been generated. You can get it !url', array('!url' => l(t('here'), file_create_url($dest . '/' . $file)))) . '.</ul></li></div>';
  if (!phantomjs_capture_screen($url, $dest, $file)) {
    $output = '<div class="messages error"><ul><li>' . t('The address entered could not be retrieved.') . '</ul></li></div>';
  }

  // Return.
  return array(
    'phantomjs_capture_test' => array(
      'result' => array(
        '#prefix' => '<div id="phantomjs-capture-test-result">',
        '#suffix' => '</div>',
        '#markup' => $output,
      ),
    ),
  );
}

/**
 * Returns the version number of the currently install PhantomJS.
 *
 * @param string $binary
 *   Optional absolute path with the PhantomJS binary. If not given the default
 *   location is used.
 *
 * @return string|boolean
 *   If PhantomJS is found and executable the version number is returned else
 *   FALSE is returned.
 */
function _phantomjs_capture_get_version($binary = NULL) {
  // If the binary is not given try the default path.
  if (is_null($binary)) {
    $binary = _phantomjs_capture_get_binray();
    if (!$binary) {
      drupal_set_message(t('PhantomJS binary was not found. Plase intall PhantomJS on the system.'));
      return FALSE;
    }
  }

  // Execute PhantomJS to get its version, if PhantomJS was found.
  $output = array();
  exec($binary . ' -v', $output);
  return $output[0];
}

/**
 * Returns the absolute path with the binary to the installed PhantomJS.
 *
 * @return string|boolean
 *   The executable PhantomJS binary or FALSE if not found.
 */
function _phantomjs_capture_get_binray() {
  $binary = variable_get('phantomjs_capture_binary', '/usr/local/bin/phantomjs');
  if (!file_exists($binary)) {
    return FALSE;
  }
  return $binary;
}

/**
 * Captures a screen shot using PhantomJS by calling the program.
 *
 * @param string $url
 *   The ULR/http(s) to render the screen shot from.
 * @param string $dest
 *   The destination for the rendered file (e.g. public://fecthed_images).
 * @param string $filename
 *   The filename to store the file as in the destination.
 * @param string $element
 *   The id of the DOM element to render in the document.
 *
 * @return bool
 *   Returns TRUE if the screen shot was taken else FALSE on error.
 *
 * @todo: provide this as a service
 */
function phantomjs_capture_screen($url, $dest, $filename, $element = NULL) {
  // Get PhantomJS binary.
  $binary = _phantomjs_capture_get_binray();
  if (!$binary) {
    drupal_set_message(t('PhantomJS binary was not found. Plase intall PhantomJS on the system.'));
    return FALSE;
  }

  // Check that destination is writable.
  if (!file_prepare_directory($dest, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('The PhantomJS destination path (@dest) was not writeable or could not be created.', array(
      '@dest' => $dest,
    )));
    return FALSE;
  }

  // Get absolute path to PhantomJS script and the destination file.
  $script = realpath(variable_get('phantomjs_capture_script', drupal_get_path('module', 'phantomjs_capture') . '/js/phantomjs_capture.js'));
  $dest = drupal_realpath($dest . '/' . $filename);

  // Run PhantomJS to create the screen shot.
  $output = array();
  if ($element) {
    exec($binary . ' ' . $script . ' ' . $url . ' ' . $dest . ' ' . escapeshellarg($element), $output);
  }
  else {
    exec($binary . ' ' . $script . ' ' . $url . ' ' . $dest, $output);
  }

  // Check that PhantomJS was able to load the page.
  if ($output[0] == '500') {
    return FALSE;
  }
  return TRUE;
}
